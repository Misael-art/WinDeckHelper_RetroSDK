# WinDeckHelper.ps1 - Script principal (orquestrador)
# Exemplo de implementação para o plano de modularização

# Configuração inicial
$ErrorActionPreference = "Stop"
$VerbosePreference = "Continue"
$scriptPath = $PSScriptRoot

# Inicialização de variáveis globais
$global:NeedReset = $false
$global:Errors = @()
$global:Lang = if ((Get-WinSystemLocale).Name -eq 'pt-BR') { 'POR' } elseif ((Get-WinSystemLocale).Name -eq 'ru-RU') { 'RUS' } else { 'ENG' }

try {
    # Carrega as assemblies necessárias
    Add-Type -AssemblyName PresentationFramework
    [void][System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
    [void][System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")

    # Importa módulos principais
    Import-Module "$scriptPath\modules\core\logging.psm1"
    Import-Module "$scriptPath\modules\core\config.psm1"
    Import-Module "$scriptPath\modules\core\ui.psm1"
    Import-Module "$scriptPath\modules\core\utils.psm1"

    # Inicia sessão de log
    $sessionId = Start-Logging
    Write-Log "Iniciando WinDeckHelper" -Level "INFO"

    # Verifica privilégios de administrador
    Import-Module "$scriptPath\modules\environment\system.psm1"
    $adminCheck = Test-AdminPrivileges
    
    if (-not $adminCheck) {
        Write-Log "O script precisa ser executado como administrador" -Level "ERROR"
        Show-Notification "Este aplicativo requer privilégios de administrador." -Type "ERROR" -RequireConfirmation
        Stop-Logging $sessionId
        exit 1
    }

    # Verifica requisitos do sistema
    $sysRequirements = Test-SystemRequirements
    $allRequirementsMet = $true
    
    foreach ($req in $sysRequirements.GetEnumerator()) {
        if (-not $req.Value) {
            Write-Log "Requisito não atendido: $($req.Key)" -Level "ERROR"
            $allRequirementsMet = $false
        }
    }
    
    if (-not $allRequirementsMet) {
        Show-Notification "Alguns requisitos do sistema não foram atendidos. Verifique o log para mais detalhes." -Type "WARNING" -RequireConfirmation
    }

    # Carrega configurações
    $config = Get-Configuration
    Write-Log "Configurações carregadas" -Level "INFO"

    # Para comunicação entre runspaces
    $sync = [Hashtable]::Synchronized(@{})
    $sync.rootPath = $scriptPath
    $sync.version = 'LCD' # Valor padrão, será atualizado após detecção

    # Inicializa a interface do usuário
    $mainForm = Initialize-MainForm -Sync $sync -Config $config
    Write-Log "Interface do usuário inicializada" -Level "INFO"

    # Função principal para executar operações selecionadas
    function Start-Operations {
        param(
            [string[]]$SelectedOperations
        )
        
        $results = @{}
        $totalOperations = $SelectedOperations.Count
        $currentOperation = 0
        
        foreach ($operation in $SelectedOperations) {
            $currentOperation++
            $percentComplete = [math]::Floor(($currentOperation / $totalOperations) * 100)
            
            Write-Log "Iniciando operação: $operation" -Level "INFO"
            Show-Progress -Status "Processando $operation" -PercentComplete $percentComplete -Phase "Operação $currentOperation de $totalOperations"
            
            switch ($operation) {
                "InstallDrivers" {
                    Import-Module "$scriptPath\modules\installation\drivers.psm1"
                    $results[$operation] = Install-Drivers
                }
                "InstallSoftware" {
                    Import-Module "$scriptPath\modules\installation\software.psm1"
                    $results[$operation] = Install-Software -Packages $config.Software
                }
                "InstallSDKs" {
                    Import-Module "$scriptPath\modules\installation\sdk.psm1"
                    $results[$operation] = Install-SDK -SDKs $config.SDKs
                }
                "InstallEmulators" {
                    Import-Module "$scriptPath\modules\installation\emulators.psm1"
                    $results[$operation] = Install-Emulators -Emulators $config.Emulators
                }
                "ApplyTweaks" {
                    Import-Module "$scriptPath\modules\tweaks\performance.psm1"
                    Import-Module "$scriptPath\modules\tweaks\bootloader.psm1"
                    Import-Module "$scriptPath\modules\tweaks\display.psm1"
                    
                    $results[$operation] = @{
                        "Performance" = Apply-PerformanceTweaks -Tweaks $config.Tweaks.Performance
                        "Bootloader" = Apply-BootloaderTweaks -Tweaks $config.Tweaks.Bootloader
                        "Display" = Apply-DisplayTweaks -Tweaks $config.Tweaks.Display
                    }
                }
            }
            
            Write-Log "Operação concluída: $operation" -Level "INFO"
        }
        
        # Verifica resultados e exibe resumo
        $successCount = 0
        $failureCount = 0
        $failedOperations = @()
        
        foreach ($result in $results.GetEnumerator()) {
            if ($result.Value -eq $true -or ($result.Value -is [hashtable] -and ($result.Value.Values | Where-Object { $_ -eq $true }).Count -eq $result.Value.Count)) {
                $successCount++
            } else {
                $failureCount++
                $failedOperations += $result.Key
            }
        }
        
        if ($failureCount -gt 0) {
            $errorMessage = "Os seguintes componentes FALHARAM na instalação:`n`n"
            $errorMessage += $failedOperations -join "`n"
            $errorMessage += "`n`nDeseja ver o arquivo de log de erros?"
            
            $showLog = Show-Confirmation -Message $errorMessage -Title "Erros de Instalação"
            if ($showLog) {
                Start-Process "notepad.exe" -ArgumentList (Get-LogFilePath)
            }
        } else {
            $successMessage = "Todos os componentes foram instalados com sucesso!`n`nDeseja reiniciar o dispositivo?"
            $restart = Show-Confirmation -Message $successMessage -Title "Instalação Concluída"
            
            if ($restart) {
                $global:NeedReset = $true
            }
        }
        
        return $results
    }

    # Registra manipuladores de eventos para a interface
    Register-EventHandlers -Form $mainForm -Sync $sync -StartOperationsFunction ${function:Start-Operations}

    # Exibe a interface e aguarda interação do usuário
    [void]$mainForm.ShowDialog()

    # Verifica se é necessário reiniciar
    if ($global:NeedReset) {
        Write-Log "Reiniciando o sistema conforme solicitado pelo usuário" -Level "INFO"
        Restart-Computer -Force
    }

    # Encerra a sessão de log
    Write-Log "Encerrando WinDeckHelper" -Level "INFO"
    Stop-Logging $sessionId
} catch {
    $errorMsg = $_.Exception.Message
    $errorLine = $_.InvocationInfo.ScriptLineNumber
    $errorScript = $_.InvocationInfo.ScriptName
    
    # Tenta usar o módulo de logging se estiver carregado
    try {
        Write-Log "Erro crítico: $errorMsg em $errorScript:$errorLine" -Level "ERROR"
        Stop-Logging $sessionId
    } catch {
        # Fallback para log básico se o módulo não estiver disponível
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $logMessage = "[$timestamp] [ERROR] Erro crítico: $errorMsg em $errorScript:$errorLine"
        
        $logDir = Join-Path $scriptPath "logs"
        if (-not (Test-Path $logDir)) {
            New-Item -ItemType Directory -Path $logDir -Force | Out-Null
        }
        
        $fallbackLogFile = Join-Path $logDir "error.log"
        Add-Content -Path $fallbackLogFile -Value $logMessage -Encoding UTF8
    }
    
    # Exibe mensagem de erro para o usuário
    [System.Windows.Forms.MessageBox]::Show("Ocorreu um erro crítico: $errorMsg`n`nVerifique o arquivo de log para mais detalhes.", "Erro", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
}