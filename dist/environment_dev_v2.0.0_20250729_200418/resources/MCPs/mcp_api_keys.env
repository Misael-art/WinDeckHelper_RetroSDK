# Preencha as chaves necessárias para os MCPs que você usa.
# Deixe em branco ou comente as que não são necessárias.
# O script PowerShell lerá este arquivo (renomeado para mcp_api_keys.env).

# GitHub MCP (@smithery-ai/github)
# Gere um Personal Access Token (PAT) com escopos apropriados (repo, gist, etc.)
# Veja: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
GITHUB_PERSONAL_ACCESS_TOKEN="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"

# Gemini Thinking Serve (@bartekke8it56w2/new-mcp)
# Obtenha sua chave de API do Google AI Studio: https://aistudio.google.com/app/apikey
GEMINI_API_KEY="AIzaSyAUAhT_4ilNl-1RAE0RaZ-SfUwyjss2U6A"

# Qwen Autonomous Coder Agent (@sfatkhutdinov/autonomous-coder-agent)
# Se estiver usando um servidor Ollama local para Qwen, configure a URL base e o nome do modelo.
# QWEN_BASE_URL="http://localhost:11434/api" # Exemplo para Ollama local
# QWEN_MODEL_NAME="qwen:latest"             # Exemplo para Ollama local

# Supabase MCP Server (@alexander-zuev/supabase-mcp-server)
# Encontre estas informações no seu painel Supabase
SUPABASE_PROJECT_REF="seu-project-ref"
SUPABASE_DB_PASSWORD="sua-senha-db"
SUPABASE_REGION="sua-regiao" # ex: us-east-1
SUPABASE_ACCESS_TOKEN="seu-token-de-acesso" # Opcional, para Management API
SUPABASE_SERVICE_ROLE_KEY="sua-chave-service-role" # Opcional, para Auth Admin SDK

# Figma Context MCP (@GLips/Figma-Context-MCP)
# Gere um Personal Access Token nas configurações da sua conta Figma
FIGMA_PERSONAL_ACCESS_TOKEN="..."
FIGMA_FILE_KEY="..." # Opcional, para focar em um arquivo específico

# Slack MCP (@modelcontextprotocol/server-slack)
# Crie um App Slack e obtenha um Bot User OAuth Token
SLACK_BOT_TOKEN="xoxb-..."

# Outras chaves que possam ser necessárias para outros MCPs...

#**"magic" UI:**
#   **Descrição:** Servidor para criar interfaces de usuário.
#   **Configuração:**
#    *   `TWENTY_FIRST_API_KEY`: `a2f7a2fa0a8a48804bf28ca413799ee09fea88e0e7e117d8d549a65ab82147a7`
#    **Instruções:**
#        *   Verifique se o servidor `github.com/21st-dev/magic-mcp` está configurado corretamente no arquivo de configuração do Cline.
#        *   Para testar a instalação, envie o comando `/ui create a basic button` no Cline.
TWENTY_FIRST_API_KEY = a2f7a2fa0a8a48804bf28ca413799ee09fea88e0e7e117d8d549a65ab82147a7


# **Servidor MCP do Google Drive:**
#   *   **Descrição:** Permite acesso ao Google Drive.
#   *   **Configuração:**
#       *   Siga as etapas de configuração descritas abaixo.
#   *   **Instruções:**
#       1.  Crie um projeto no Google Cloud (https://console.cloud.google.com/projectcreate).
#       2.  Habilite a API do Google Drive (https://console.cloud.google.com/workspace-api/products).
#       3.  Configure a tela de consentimento OAuth (https://console.cloud.google.com/apis/credentials/consent). Use "internal" para testes.
#       4.  Adicione o escopo OAuth `https://www.googleapis.com/auth/drive.readonly`.
#       5.  Crie um ID de cliente OAuth (https://console.cloud.google.com/apis/credentials/oauthclient) para o tipo de aplicativo "Aplicativo para computador".
#       6.  Baixe o arquivo JSON das chaves OAuth do seu cliente.
#       7.  Renomeie o arquivo de chaves para `gcp-oauth.keys.json` e coloque-o no diretório de trabalho atual (d:/Steamapps/DevProjetos/PC Engines Projects/Mega_Emu).
#       8.  Execute o servidor com o comando `npx @modelcontextprotocol/server-gdrive auth` no terminal. Isso abrirá um fluxo de autenticação no seu navegador.
#       9.  Complete o processo de autenticação. As credenciais serão salvas no arquivo `gcp-oauth.keys.json`.
#       10. Verifique se o servidor está funcionando: Execute o comando `npx @modelcontextprotocol/server-gdrive` no terminal. Se não houver erros, o servidor está funcionando.
#       11. Teste a ferramenta search: Use a ferramenta search com o nome do servidor `github.com/modelcontextprotocol/servers/tree/main/src/gdrive` e um termo de pesquisa, como "teste".
Google Drive Client ID = 509558189469-dq1l2t3tljkcrplg29cc59oss17vaqcv.apps.googleusercontent.com

#  **Spotify MCP server:**
#   *   **Descrição:** Permite interagir com o Spotify.
#   *   **Configuração:**
 Spotify Client ID  = 85e25ea8063c4a6ca3e503eee25425d8
 Spotify Client Secret  = 555a3cfc04c64810a893b9ed7b4df01f
#    *   **Instruções:**
#        *   Forneça as credenciais do Spotify (Client ID e Client Secret) e garanta que o servidor esteja em execução.
#		 * npx -y @smithery/cli@latest install @superseoworld/mcp-spotify --client cline --config "{\"spotifyClientId\":\"85e25ea8063c4a6ca3e503eee25425d8\",\"spotifyClientSecret\":\"555a3cfc04c64810a893b9ed7b4df01f\"}"

#  **Notion MCP server:**
#   **Descrição:** Permite interagir com o Notion.
#   **Configuração:**
Notion token  = ntn_pw41845606141haU2u0UgJSl26LJkF3FwOBe1mDjo1SbUI
#   **Instruções:**
#   Verifique se o servidor Notion está configurado corretamente no arquivo de configuração do Cline.
