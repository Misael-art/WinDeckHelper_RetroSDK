#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para debugar o status de instala√ß√£o dos devkits retro
Identifica problemas na detec√ß√£o de instala√ß√µes
"""

import os
import sys
import subprocess
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def check_sgdk_installation():
    """Verifica detalhadamente a instala√ß√£o do SGDK"""
    logger.info("=== VERIFICA√á√ÉO DETALHADA DO SGDK ===")
    
    # Caminho esperado do SGDK
    sgdk_path = Path("C:/Users/misae/RetroDevKits/retro_devkits/sgdk")
    logger.info(f"Caminho SGDK: {sgdk_path}")
    logger.info(f"SGDK existe: {sgdk_path.exists()}")
    
    if sgdk_path.exists():
        logger.info("üìÅ Conte√∫do do diret√≥rio SGDK:")
        for item in sgdk_path.iterdir():
            logger.info(f"  - {item.name} ({'DIR' if item.is_dir() else 'FILE'})")
    
    # Verificar arquivos espec√≠ficos
    files_to_check = [
        sgdk_path / "bin" / "rescomp.jar",
        sgdk_path / "inc" / "genesis.h",
        sgdk_path / "bin" / "gcc" / "bin" / "m68k-elf-gcc.exe"
    ]
    
    logger.info("\nüìã Verifica√ß√£o de arquivos essenciais:")
    for file_path in files_to_check:
        exists = file_path.exists()
        logger.info(f"  {'‚úÖ' if exists else '‚ùå'} {file_path.relative_to(sgdk_path)}: {exists}")
    
    # Verificar comandos de verifica√ß√£o problem√°ticos
    logger.info("\nüîç Testando comandos de verifica√ß√£o:")
    
    # Teste Java
    try:
        result = subprocess.run(["java", "-version"], capture_output=True, text=True, timeout=10)
        logger.info(f"  ‚úÖ Java: Dispon√≠vel (c√≥digo: {result.returncode})")
        if result.stderr:
            logger.info(f"    Vers√£o: {result.stderr.split()[2] if len(result.stderr.split()) > 2 else 'N/A'}")
    except Exception as e:
        logger.error(f"  ‚ùå Java: N√£o dispon√≠vel ({e})")
    
    # Teste Make
    try:
        result = subprocess.run(["make", "--version"], capture_output=True, text=True, timeout=10)
        logger.info(f"  ‚úÖ Make: Dispon√≠vel (c√≥digo: {result.returncode})")
    except Exception as e:
        logger.error(f"  ‚ùå Make: N√£o dispon√≠vel ({e})")
    
    # Teste comandos test -f (problem√°ticos no Windows)
    logger.info("\n‚ö†Ô∏è  Testando comandos 'test -f' (problem√°ticos no Windows):")
    for file_path in files_to_check:
        test_command = f"test -f {file_path}"
        try:
            result = subprocess.run(test_command, shell=True, capture_output=True, text=True, timeout=10)
            logger.info(f"  {'‚úÖ' if result.returncode == 0 else '‚ùå'} {test_command}: c√≥digo {result.returncode}")
        except Exception as e:
            logger.error(f"  ‚ùå {test_command}: Erro ({e})")

def check_vscode_extensions():
    """Verifica extens√µes do VSCode instaladas"""
    logger.info("\n=== VERIFICA√á√ÉO DE EXTENS√ïES VSCODE ===")
    
    try:
        # Verificar se VSCode est√° instalado
        result = subprocess.run(["code", "--version"], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            logger.info("‚úÖ VSCode est√° instalado")
            
            # Listar extens√µes instaladas
            result = subprocess.run(["code", "--list-extensions"], capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                extensions = result.stdout.strip().split('\n') if result.stdout.strip() else []
                logger.info(f"üì¶ Extens√µes instaladas ({len(extensions)}):")
                
                # Verificar extens√µes espec√≠ficas do SGDK
                sgdk_extensions = [
                    "zerasul.genesis-code",
                    "ms-vscode.cpptools",
                    "13xforever.language-x86-64-assembly",
                    "ms-vscode.hexeditor"
                ]
                
                for ext in sgdk_extensions:
                    installed = ext in extensions
                    logger.info(f"  {'‚úÖ' if installed else '‚ùå'} {ext}: {'Instalada' if installed else 'N√£o instalada'}")
                
                if extensions:
                    logger.info("\nüìã Todas as extens√µes:")
                    for ext in sorted(extensions):
                        logger.info(f"  - {ext}")
            else:
                logger.error("‚ùå Erro ao listar extens√µes")
        else:
            logger.error("‚ùå VSCode n√£o est√° instalado ou n√£o est√° no PATH")
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar VSCode: {e}")

def check_emulators():
    """Verifica emuladores instalados"""
    logger.info("\n=== VERIFICA√á√ÉO DE EMULADORES ===")
    
    emulators = ["blastem", "gens", "fusion", "retroarch"]
    
    for emulator in emulators:
        try:
            result = subprocess.run([emulator, "--version"], capture_output=True, text=True, timeout=10)
            logger.info(f"  {'‚úÖ' if result.returncode == 0 else '‚ùå'} {emulator}: {'Dispon√≠vel' if result.returncode == 0 else 'N√£o dispon√≠vel'}")
        except Exception:
            # Tentar encontrar execut√°vel
            import shutil
            exe_path = shutil.which(emulator) or shutil.which(f"{emulator}.exe")
            if exe_path:
                logger.info(f"  ‚ö†Ô∏è  {emulator}: Encontrado em {exe_path} (mas n√£o responde a --version)")
            else:
                logger.info(f"  ‚ùå {emulator}: N√£o encontrado")

def test_current_detection_system():
    """Testa o sistema atual de detec√ß√£o"""
    logger.info("\n=== TESTANDO SISTEMA ATUAL DE DETEC√á√ÉO ===")
    
    try:
        # Importar e testar o sistema atual
        sys.path.append(str(Path.cwd()))
        from core.retro_devkit_manager import RetroDevKitManager
        
        manager = RetroDevKitManager()
        status = manager.get_installation_status()
        
        logger.info("üìä Status reportado pelo sistema:")
        for devkit_id, is_installed in status.items():
            logger.info(f"  {'‚úÖ' if is_installed else '‚ùå'} {devkit_id}: {'Instalado' if is_installed else 'N√£o instalado'}")
        
        # Verificar especificamente o SGDK
        if 'megadrive' in status:
            logger.info(f"\nüéØ SGDK (megadrive) reportado como: {'INSTALADO' if status['megadrive'] else 'N√ÉO INSTALADO'}")
            
            # Verificar comandos espec√≠ficos do SGDK
            sgdk_devkit = manager.devkits['megadrive']
            logger.info("\nüîç Comandos de verifica√ß√£o do SGDK:")
            for i, cmd in enumerate(sgdk_devkit.verification_commands, 1):
                logger.info(f"  {i}. {cmd}")
                
                try:
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
                    logger.info(f"     {'‚úÖ' if result.returncode == 0 else '‚ùå'} C√≥digo: {result.returncode}")
                    if result.stderr:
                        logger.info(f"     Erro: {result.stderr.strip()[:100]}")
                except Exception as e:
                    logger.error(f"     ‚ùå Exce√ß√£o: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar sistema atual: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal"""
    logger.info("üîç DIAGN√ìSTICO COMPLETO DO SISTEMA DE DETEC√á√ÉO DE DEVKITS")
    logger.info("=" * 60)
    
    check_sgdk_installation()
    check_vscode_extensions()
    check_emulators()
    test_current_detection_system()
    
    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ Diagn√≥stico conclu√≠do!")
    
    # Sugest√µes de corre√ß√£o
    logger.info("\nüí° SUGEST√ïES DE CORRE√á√ÉO:")
    logger.info("1. Substituir comandos 'test -f' por verifica√ß√£o Python nativa")
    logger.info("2. Verificar depend√™ncias globais (Java, Make) de forma mais robusta")
    logger.info("3. Implementar verifica√ß√£o espec√≠fica para Windows")
    logger.info("4. Adicionar verifica√ß√£o de extens√µes VSCode")
    logger.info("5. Melhorar detec√ß√£o de emuladores")

if __name__ == "__main__":
    main()