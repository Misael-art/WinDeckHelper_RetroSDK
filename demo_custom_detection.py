#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Demonstra√ß√£o da detec√ß√£o customizada de aplicativos implementada.

Este script demonstra as valida√ß√µes robustas adicionadas para detectar:
- Trae.exe
- Code - Insiders.exe (Visual Studio Code Insiders)
- RevoUnin.exe (Revo Uninstaller)
- git-bash.exe (Git Bash)
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

from core.detection_engine import DetectionEngine, CustomApplicationDetectionStrategy

def demonstrate_custom_detection():
    """
    Demonstra a funcionalidade de detec√ß√£o customizada.
    """
    print("üîç DEMONSTRA√á√ÉO DA DETEC√á√ÉO CUSTOMIZADA DE APLICATIVOS")
    print("=" * 70)
    
    print("\nüìã Aplicativos configurados para detec√ß√£o customizada:")
    print("   1. Trae AI-powered IDE")
    print("   2. Visual Studio Code Insiders")
    print("   3. Revo Uninstaller")
    print("   4. Git Bash")
    
    print("\nüîß Recursos implementados:")
    print("   ‚úì M√∫ltiplos caminhos de busca por aplicativo")
    print("   ‚úì Detec√ß√£o via arquivos execut√°veis")
    print("   ‚úì Detec√ß√£o via registro do Windows (fallback)")
    print("   ‚úì Extra√ß√£o de vers√£o robusta (win32api + PowerShell fallback)")
    print("   ‚úì Valida√ß√£o de funcionalidade dos execut√°veis")
    print("   ‚úì Substitui√ß√£o autom√°tica de placeholders (username)")
    print("   ‚úì Alta confian√ßa (95%) para detec√ß√µes customizadas")
    
    # Criar estrat√©gia customizada
    custom_strategy = CustomApplicationDetectionStrategy()
    
    print("\nüéØ EXECUTANDO DETEC√á√ÉO CUSTOMIZADA...")
    print("-" * 50)
    
    try:
        detected_apps = custom_strategy.detect_applications()
        
        if detected_apps:
            print(f"\n‚úÖ SUCESSO! {len(detected_apps)} aplicativo(s) detectado(s):\n")
            
            for i, app in enumerate(detected_apps, 1):
                print(f"   {i}. {app.name}")
                print(f"      üìç Vers√£o: {app.version}")
                print(f"      üìÇ Caminho: {app.executable_path}")
                print(f"      üîß M√©todo: {app.detection_method.value}")
                print(f"      üéØ Confian√ßa: {app.confidence:.0%}")
                
                # Informa√ß√µes adicionais dos metadados
                if app.metadata:
                    if app.metadata.get('description'):
                        print(f"      üìù Descri√ß√£o: {app.metadata['description']}")
                    if app.metadata.get('custom_detection'):
                        print(f"      üè∑Ô∏è  Detec√ß√£o customizada: Sim")
                print()
        else:
            print("\n‚ö†Ô∏è Nenhum aplicativo customizado foi detectado.")
            print("   Verifique se os aplicativos est√£o instalados nos caminhos esperados.")
    
    except Exception as e:
        print(f"\n‚ùå Erro durante a detec√ß√£o: {e}")
        return False
    
    # Demonstrar integra√ß√£o com DetectionEngine
    print("\nüîÑ TESTANDO INTEGRA√á√ÉO COM DETECTIONENGINE...")
    print("-" * 50)
    
    try:
        engine = DetectionEngine()
        result = engine.detect_all_applications()
        
        # Filtrar aplicativos customizados
        custom_detected = []
        target_names = ["trae", "visual studio code insiders", "revo uninstaller", "git bash"]
        
        for app in result.applications:
            app_name_lower = app.name.lower()
            if any(target in app_name_lower for target in target_names):
                custom_detected.append(app)
        
        print(f"\n‚úÖ DetectionEngine detectou {len(custom_detected)} aplicativo(s) customizado(s)")
        print(f"   (de um total de {len(result.applications)} aplicativos detectados)")
        
        if custom_detected:
            print("\n   Aplicativos customizados encontrados pelo DetectionEngine:")
            for app in custom_detected:
                print(f"   ‚Ä¢ {app.name} v{app.version}")
    
    except Exception as e:
        print(f"\n‚ùå Erro na integra√ß√£o com DetectionEngine: {e}")
    
    print("\n" + "=" * 70)
    print("‚ú® DEMONSTRA√á√ÉO CONCLU√çDA")
    print("\nüí° A detec√ß√£o customizada est√° funcionando corretamente!")
    print("   Os aplicativos especificados agora s√£o detectados com valida√ß√µes robustas.")
    print("\nüìö Pr√≥ximos passos:")
    print("   1. A detec√ß√£o customizada est√° integrada ao sistema principal")
    print("   2. Os aplicativos ser√£o exibidos na interface gr√°fica")
    print("   3. As valida√ß√µes garantem detec√ß√£o precisa e confi√°vel")
    
    return True

if __name__ == "__main__":
    try:
        demonstrate_custom_detection()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n\nüí• Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüëã Obrigado por usar a demonstra√ß√£o!")