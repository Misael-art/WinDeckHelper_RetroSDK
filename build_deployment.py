#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Build Script Otimizado para Environment Dev Deep Evaluation
Script de build que usa PyInstaller com configura√ß√µes otimizadas.
"""

import os
import sys
import subprocess
import shutil
import logging
from pathlib import Path
from datetime import datetime
import json

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class OptimizedBuilder:
    """Builder otimizado para o projeto"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.build_dir = self.project_root / "build"
        self.dist_dir = self.project_root / "dist"
        self.deployment_dir = self.project_root / "deployment"
        self.spec_file = self.project_root / "environment_dev.spec"
        
    def clean_previous_builds(self):
        """Limpa builds anteriores"""
        logger.info("üßπ Limpando builds anteriores...")
        
        dirs_to_clean = [self.build_dir, self.dist_dir, self.deployment_dir]
        
        for dir_path in dirs_to_clean:
            if dir_path.exists():
                shutil.rmtree(dir_path)
                logger.info(f"  ‚úì Removido: {dir_path}")
        
        # Remover arquivos tempor√°rios do PyInstaller
        temp_files = list(self.project_root.glob("*.spec"))
        for temp_file in temp_files:
            if temp_file.name != "environment_dev.spec":
                temp_file.unlink()
                logger.info(f"  ‚úì Removido: {temp_file}")
    
    def install_build_dependencies(self):
        """Instala depend√™ncias necess√°rias para o build"""
        logger.info("üì¶ Instalando depend√™ncias de build...")
        
        build_deps = [
            "pyinstaller>=5.0",
            "pillow",
            "pyyaml",
            "requests",
            "psutil",
            "py7zr",
        ]
        
        for dep in build_deps:
            try:
                subprocess.run([
                    sys.executable, "-m", "pip", "install", "--upgrade", dep
                ], check=True, capture_output=True)
                logger.info(f"  ‚úì Instalado: {dep}")
            except subprocess.CalledProcessError as e:
                logger.warning(f"  ‚ö† Erro ao instalar {dep}: {e}")
    
    def verify_project_structure(self):
        """Verifica se a estrutura do projeto est√° correta"""
        logger.info("üîç Verificando estrutura do projeto...")
        
        required_files = [
            "main.py",
            "core/__init__.py",
            "gui/__init__.py",
            "config/components",
            "docs/README.md"
        ]
        
        missing_files = []
        for file_path in required_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                missing_files.append(file_path)
            else:
                logger.info(f"  ‚úì Encontrado: {file_path}")
        
        if missing_files:
            logger.error(f"  ‚ùå Arquivos ausentes: {missing_files}")
            return False
        
        logger.info("  ‚úÖ Estrutura do projeto verificada")
        return True
    
    def create_optimized_spec(self):
        """Cria arquivo spec otimizado se n√£o existir"""
        if not self.spec_file.exists():
            logger.info("üìù Criando arquivo spec otimizado...")
            # O arquivo j√° foi criado anteriormente
            logger.info("  ‚úì Arquivo spec j√° existe")
        else:
            logger.info("  ‚úì Usando arquivo spec existente")
    
    def build_executable(self):
        """Constr√≥i o execut√°vel usando PyInstaller"""
        logger.info("üî® Construindo execut√°vel...")
        
        # Comando PyInstaller otimizado
        cmd = [
            "pyinstaller",
            "--clean",  # Limpar cache
            "--noconfirm",  # N√£o pedir confirma√ß√£o
            str(self.spec_file)
        ]
        
        try:
            # Executar build
            logger.info(f"  Executando: {' '.join(cmd)}")
            result = subprocess.run(
                cmd, 
                check=True, 
                capture_output=True, 
                text=True,
                cwd=self.project_root
            )
            
            logger.info("  ‚úÖ Build conclu√≠do com sucesso")
            
            # Verificar se o execut√°vel foi criado
            exe_path = self.dist_dir / "EnvironmentDevDeepEvaluation"
            if exe_path.exists():
                logger.info(f"  ‚úì Execut√°vel criado: {exe_path}")
                return True
            else:
                logger.error("  ‚ùå Execut√°vel n√£o encontrado ap√≥s build")
                return False
                
        except subprocess.CalledProcessError as e:
            logger.error(f"  ‚ùå Erro no build: {e}")
            logger.error(f"  Stdout: {e.stdout}")
            logger.error(f"  Stderr: {e.stderr}")
            return False
    
    def optimize_executable(self):
        """Otimiza o execut√°vel criado"""
        logger.info("‚ö° Otimizando execut√°vel...")
        
        exe_dir = self.dist_dir / "EnvironmentDevDeepEvaluation"
        if not exe_dir.exists():
            logger.error("  ‚ùå Diret√≥rio do execut√°vel n√£o encontrado")
            return False
        
        # Remover arquivos desnecess√°rios
        unnecessary_files = [
            "*.pyc",
            "__pycache__",
            "*.pyo",
            "*.log",
            "test_*",
            "debug_*"
        ]
        
        removed_count = 0
        for pattern in unnecessary_files:
            for file_path in exe_dir.rglob(pattern):
                if file_path.is_file():
                    file_path.unlink()
                    removed_count += 1
                elif file_path.is_dir():
                    shutil.rmtree(file_path, ignore_errors=True)
                    removed_count += 1
        
        logger.info(f"  ‚úì Removidos {removed_count} arquivos desnecess√°rios")
        
        # Calcular tamanho final
        total_size = sum(f.stat().st_size for f in exe_dir.rglob('*') if f.is_file())
        size_mb = total_size / (1024 * 1024)
        logger.info(f"  ‚úì Tamanho final: {size_mb:.1f} MB")
        
        return True
    
    def create_portable_package(self):
        """Cria pacote port√°vel completo"""
        logger.info("üì¶ Criando pacote port√°vel...")
        
        # Criar diret√≥rio de deployment
        self.deployment_dir.mkdir(exist_ok=True)
        package_dir = self.deployment_dir / "EnvironmentDevDeepEvaluation_Portable"
        
        if package_dir.exists():
            shutil.rmtree(package_dir)
        package_dir.mkdir()
        
        # Copiar execut√°vel
        exe_source = self.dist_dir / "EnvironmentDevDeepEvaluation"
        exe_dest = package_dir / "EnvironmentDevDeepEvaluation"
        shutil.copytree(exe_source, exe_dest)
        logger.info("  ‚úì Execut√°vel copiado")
        
        # Copiar arquivos essenciais
        essential_files = [
            ("README.md", "README.md"),
            ("requirements.txt", "requirements.txt"),
            ("FINAL_FIXES_SUMMARY.md", "docs/FINAL_FIXES_SUMMARY.md"),
            ("SGDK_FIXES_SUMMARY.md", "docs/SGDK_FIXES_SUMMARY.md"),
        ]
        
        for source_file, dest_file in essential_files:
            source_path = self.project_root / source_file
            dest_path = package_dir / dest_file
            if source_path.exists():
                dest_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source_path, dest_path)
                logger.info(f"  ‚úì Copiado: {source_file}")
        
        # Copiar diret√≥rios essenciais
        essential_dirs = [
            ("config", "config"),
            ("docs", "docs"),
            ("data", "data"),
        ]
        
        for source_dir, dest_dir in essential_dirs:
            source_path = self.project_root / source_dir
            dest_path = package_dir / dest_dir
            if source_path.exists():
                shutil.copytree(source_path, dest_path, dirs_exist_ok=True)
                logger.info(f"  ‚úì Copiado: {source_dir}/")
        
        # Criar scripts de inicializa√ß√£o
        self._create_launch_scripts(package_dir)
        
        # Criar arquivo de informa√ß√µes
        self._create_package_info(package_dir)
        
        logger.info(f"  ‚úÖ Pacote port√°vel criado: {package_dir}")
        return package_dir
    
    def _create_launch_scripts(self, package_dir):
        """Cria scripts de inicializa√ß√£o"""
        # Script Windows
        bat_script = package_dir / "Iniciar_Environment_Dev.bat"
        bat_script.write_text("""@echo off
title Environment Dev Deep Evaluation v2.0
echo.
echo ==========================================
echo  Environment Dev Deep Evaluation v2.0
echo  Sistema de Detecao e Instalacao
echo ==========================================
echo.
echo Iniciando aplicacao...
cd /d "%~dp0"
.\\EnvironmentDevDeepEvaluation\\EnvironmentDevDeepEvaluation.exe
if errorlevel 1 (
    echo.
    echo Erro ao executar a aplicacao!
    echo Verifique se todas as dependencias estao instaladas.
    pause
)
""", encoding='utf-8')
        
        # Script Linux/Mac
        sh_script = package_dir / "iniciar_environment_dev.sh"
        sh_script.write_text("""#!/bin/bash
echo "=========================================="
echo " Environment Dev Deep Evaluation v2.0"
echo " Sistema de Detecao e Instalacao"
echo "=========================================="
echo
echo "Iniciando aplicacao..."
cd "$(dirname "$0")"
./EnvironmentDevDeepEvaluation/EnvironmentDevDeepEvaluation
""", encoding='utf-8')
        
        try:
            sh_script.chmod(0o755)
        except:
            pass
    
    def _create_package_info(self, package_dir):
        """Cria arquivo de informa√ß√µes do pacote"""
        info_content = f"""
==========================================
Environment Dev Deep Evaluation v2.0
==========================================

DESCRI√á√ÉO:
Sistema completo de detec√ß√£o e instala√ß√£o de ambientes de desenvolvimento
com suporte a m√∫ltiplas plataformas e Steam Deck.

BUILD INFO:
- Vers√£o: 2.0.0
- Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- Plataforma: {sys.platform}
- Python: {sys.version.split()[0]}

COMO USAR:
1. Windows: Execute "Iniciar_Environment_Dev.bat"
2. Linux/Mac: Execute "./iniciar_environment_dev.sh"
3. Ou execute diretamente: EnvironmentDevDeepEvaluation/EnvironmentDevDeepEvaluation.exe

ESTRUTURA:
- EnvironmentDevDeepEvaluation/  # Execut√°vel principal
- config/                        # Configura√ß√µes
- docs/                         # Documenta√ß√£o
- data/                         # Dados iniciais
- Iniciar_Environment_Dev.bat   # Launcher Windows
- iniciar_environment_dev.sh    # Launcher Linux/Mac

FUNCIONALIDADES:
‚úÖ Detec√ß√£o autom√°tica de componentes
‚úÖ Sistema de instala√ß√£o robusto
‚úÖ Interface gr√°fica moderna
‚úÖ Suporte ao Steam Deck
‚úÖ Sistema de plugins
‚úÖ SGDK 2.11 com instala√ß√£o real
‚úÖ Sincroniza√ß√£o autom√°tica de status

REQUISITOS:
- Windows 10/11, Linux ou macOS
- 2GB RAM m√≠nimo
- 1GB espa√ßo em disco

==========================================
Environment Dev Team - {datetime.now().year}
==========================================
"""
        
        info_file = package_dir / "LEIA-ME.txt"
        info_file.write_text(info_content, encoding='utf-8')
    
    def generate_build_report(self):
        """Gera relat√≥rio do build"""
        logger.info("üìä Gerando relat√≥rio de build...")
        
        report = {
            "build_info": {
                "timestamp": datetime.now().isoformat(),
                "version": "2.0.0",
                "platform": sys.platform,
                "python_version": sys.version,
                "pyinstaller_version": self._get_pyinstaller_version()
            },
            "build_status": "success",
            "output_location": str(self.deployment_dir),
            "executable_size": self._get_executable_size(),
            "components_included": [
                "Core detection engine",
                "GUI interface",
                "Configuration files",
                "Documentation",
                "SGDK real installer",
                "Component status manager",
                "Steam Deck support"
            ]
        }
        
        report_file = self.deployment_dir / f"build_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"  ‚úì Relat√≥rio salvo: {report_file}")
        return report
    
    def _get_pyinstaller_version(self):
        """Obt√©m vers√£o do PyInstaller"""
        try:
            result = subprocess.run([sys.executable, "-m", "PyInstaller", "--version"], 
                                  capture_output=True, text=True)
            return result.stdout.strip()
        except:
            return "unknown"
    
    def _get_executable_size(self):
        """Calcula tamanho do execut√°vel"""
        exe_dir = self.dist_dir / "EnvironmentDevDeepEvaluation"
        if exe_dir.exists():
            total_size = sum(f.stat().st_size for f in exe_dir.rglob('*') if f.is_file())
            return f"{total_size / (1024 * 1024):.1f} MB"
        return "unknown"

def main():
    """Fun√ß√£o principal do build"""
    print("üöÄ Environment Dev Deep Evaluation - Build Otimizado")
    print("=" * 60)
    
    builder = OptimizedBuilder()
    
    try:
        # 1. Limpar builds anteriores
        builder.clean_previous_builds()
        
        # 2. Instalar depend√™ncias
        builder.install_build_dependencies()
        
        # 3. Verificar estrutura
        if not builder.verify_project_structure():
            logger.error("‚ùå Estrutura do projeto inv√°lida")
            return False
        
        # 4. Criar spec otimizado
        builder.create_optimized_spec()
        
        # 5. Construir execut√°vel
        if not builder.build_executable():
            logger.error("‚ùå Falha na constru√ß√£o do execut√°vel")
            return False
        
        # 6. Otimizar execut√°vel
        if not builder.optimize_executable():
            logger.error("‚ùå Falha na otimiza√ß√£o")
            return False
        
        # 7. Criar pacote port√°vel
        package_dir = builder.create_portable_package()
        
        # 8. Gerar relat√≥rio
        report = builder.generate_build_report()
        
        print("\n‚úÖ BUILD CONCLU√çDO COM SUCESSO!")
        print("=" * 40)
        print(f"üì¶ Pacote: Environment Dev Deep Evaluation v2.0")
        print(f"üìÅ Localiza√ß√£o: {package_dir}")
        print(f"üíæ Tamanho: {report['executable_size']}")
        print("\nüéØ Pr√≥ximos passos:")
        print("1. Teste o execut√°vel no pacote criado")
        print("2. Distribua o diret√≥rio completo")
        print("3. Use os scripts de inicializa√ß√£o fornecidos")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no build: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)